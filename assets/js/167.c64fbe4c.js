(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{781:function(t,e,a){"use strict";a.r(e);var r=a(80),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"存储引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎"}},[t._v("#")]),t._v(" 存储引擎")]),t._v(" "),a("img",{staticStyle:{width:"100%","max-width":"800px","max-height":"600px","margin-left":"auto","margin-right":"auto",display:"block"},attrs:{src:"https://user-images.githubusercontent.com/19167280/73625255-03fe2680-467f-11ea-91ae-64407ef1125c.png"}}),t._v(" "),a("h2",{attrs:{id:"设计思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计思想"}},[t._v("#")]),t._v(" 设计思想")]),t._v(" "),a("p",[t._v("存储引擎基于 LSM 设计。数据首先写入内存缓冲区 memtable 中，再刷到磁盘。内存中为每个设备维护当前持久化的（包括已经落盘的和正在持久化的）最大时间戳，根据这个时间戳将数据区分为顺序数据和乱序数据，不同种类的数据通过不同的 memtable 和 TsFile 管理。")]),t._v(" "),a("p",[t._v("每个数据文件 TsFile 在内存中对应一个文件索引信息 TsFileResource，供查询使用。")]),t._v(" "),a("p",[t._v("此外，存储引擎还包括异步持久化和文件合并机制。")]),t._v(" "),a("h2",{attrs:{id:"写入流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写入流程"}},[t._v("#")]),t._v(" 写入流程")]),t._v(" "),a("h3",{attrs:{id:"相关代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关代码"}},[t._v("#")]),t._v(" 相关代码")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("org.apache.iotdb.db.engine.StorageEngine")]),t._v(" "),a("p",[t._v("负责一个 IoTDB 实例的写入和访问，管理所有的 StorageGroupProsessor。")])]),t._v(" "),a("li",[a("p",[t._v("org.apache.iotdb.db.engine.storagegroup.VirtualStorageGroupProcessor")]),t._v(" "),a("p",[t._v("负责一个存储组一个时间分区内的数据写入和访问。管理所有分区的 TsFileProcessor。")])]),t._v(" "),a("li",[a("p",[t._v("org.apache.iotdb.db.engine.storagegroup.TsFileProcessor")]),t._v(" "),a("p",[t._v("负责一个 TsFile 文件的数据写入和访问。")])])]),t._v(" "),a("h2",{attrs:{id:"数据写入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据写入"}},[t._v("#")]),t._v(" 数据写入")]),t._v(" "),a("p",[t._v("详见：")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/zh/SystemDesign/StorageEngine/DataManipulation.html"}},[t._v("数据写入")])],1)]),t._v(" "),a("h2",{attrs:{id:"数据访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据访问"}},[t._v("#")]),t._v(" 数据访问")]),t._v(" "),a("ul",[a("li",[t._v("总入口（StorageEngine）: public QueryDataSource query(SingleSeriesExpression seriesExpression, QueryContext context,\n​    QueryFileManager filePathsManager)\n​\n"),a("ul",[a("li",[t._v("找到所有包含这个时间序列的顺序和乱序的 TsFileResource 进行返回，供查询引擎使用。")])])])]),t._v(" "),a("h2",{attrs:{id:"相关文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关文档"}},[t._v("#")]),t._v(" 相关文档")]),t._v(" "),a("ul",[a("li",[a("p",[a("RouterLink",{attrs:{to:"/zh/SystemDesign/StorageEngine/WAL.html"}},[t._v("写前日志 (WAL)")])],1)]),t._v(" "),a("li",[a("p",[a("RouterLink",{attrs:{to:"/zh/SystemDesign/StorageEngine/FlushManager.html"}},[t._v("memtable 持久化")])],1)]),t._v(" "),a("li",[a("p",[a("RouterLink",{attrs:{to:"/zh/SystemDesign/StorageEngine/MergeManager.html"}},[t._v("文件合并机制")])],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);