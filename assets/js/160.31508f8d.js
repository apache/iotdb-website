(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{775:function(e,s,n){"use strict";n.r(s);var t=n(80),l=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"compaction-合并"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compaction-合并"}},[e._v("#")]),e._v(" Compaction -合并")]),e._v(" "),n("h2",{attrs:{id:"整体思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#整体思路"}},[e._v("#")]),e._v(" 整体思路")]),e._v(" "),n("p",[e._v("现在 iotdb 会因为自动参数优化将很小的数据块写入文件，使得数据文件变得零散化，这导致了用户进行即席查询时需要的读盘次数过多，而后期的合并过程又不是即时进行的，这导致了系统对热数据的查询效率变慢，所以我们借鉴了虚拟内存的思想，在写入流程中增加了合并过程，通过提高一部分写放大保证了写入到正式文件的数据块不小于给定阈值，提升系统即席查询的效率。将这部分逻辑写到 StorageGroupProcessor 里去，针对封口的 tsfile 文件进行合并。")]),e._v(" "),n("ul",[n("li",[e._v("配置修改\n"),n("ul",[n("li",[e._v("iotdb-engine.properties 加一个参数 compaction_strategy：表示文件合并策略")]),e._v(" "),n("li",[e._v("compaction_strategy 内置两个策略：LEVEL_COMPACTION 和 NO_COMPACTION")]),e._v(" "),n("li",[e._v("LEVEL_COMPACTION 即开启合并并使用层级合并方法，NO_COMPACTION 即关闭合并")]),e._v(" "),n("li",[e._v("iotdb-engine.properties 中加 merge_chunk_point_number：最大的 chunk 大小限制，LEVEL_COMPACTION 时，当达到该参数就合并到最后一层")]),e._v(" "),n("li",[e._v("iotdb-engine.properties 加一个参数 max_level_num：LEVEL_COMPACTION 时最大层数")])])]),e._v(" "),n("li",[e._v("代码结构修改\n"),n("ul",[n("li",[e._v("新建一个 TsFileManagement 类，专门管理 StorageGroupProcessor 中的 seqFileList 和 unSeqFileList ，在这里写合并的主体逻辑，对外抽象对 seqFileList 和 unSeqFileList 的一系列所需接口")]),e._v(" "),n("li",[e._v("每一次合并会取第一个被合并文件的时间戳作为新文件的时间戳，即 {firstFileTimestamp}-{version}-{mergeVersion + 1}.tsfile")])])])]),e._v(" "),n("h2",{attrs:{id:"tsfilemanagement-对外提供的接口和类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tsfilemanagement-对外提供的接口和类"}},[e._v("#")]),e._v(" TsFileManagement 对外提供的接口和类")]),e._v(" "),n("ul",[n("li",[e._v("TsFileManagement 也管理未封口文件")]),e._v(" "),n("li",[e._v("TsFileManagement 同时管理 Seq 和 UnSeq 文件列表，在 StorageGroupProcessor 中只创建一个 TsFileManagement")]),e._v(" "),n("li",[e._v("List<TsFileResource> getStableTsFileList() 对外提供稳定的 TsFileResource 列表")]),e._v(" "),n("li",[e._v("List<TsFileResource> getTsFileList(boolean sequence) 对外提供（顺序/乱序）文件列表（如果 sequence = true，则提供按时间戳顺序的列表）")]),e._v(" "),n("li",[e._v("Iterator<TsFileResource> getIterator(boolean sequence) 对外提供（顺序/乱序）文件迭代器（如果 sequence = true，则提供按时间戳顺序的迭代器）")]),e._v(" "),n("li",[e._v("void remove(TsFileResource tsFileResource, boolean sequence) 删除对应的 TsFileResource 文件")]),e._v(" "),n("li",[e._v("void removeAll(List<TsFileResource> tsfileReourceList, boolean sequence) 删除对应的 TsFileResource 列表")]),e._v(" "),n("li",[e._v("void addAll(List<TsFileResource> tsfileReourceList, boolean sequence) 批量加入 TsFileResource 列表")]),e._v(" "),n("li",[e._v("boolean isEmpty(boolean sequence) 是否为空")]),e._v(" "),n("li",[e._v("int size(boolean sequence) 对应的文件列表长度")]),e._v(" "),n("li",[e._v("void forkCurrentFileList(long timePartition) 保存当前文件的某时间分区列表")]),e._v(" "),n("li",[e._v("void recover() 调用对应的恢复流程")]),e._v(" "),n("li",[e._v("CompactionMergeTask 调用对应的异步合并流程，传入 closeUnsealedTsFileProcessorCallBack 以通知外部类合并结束")])]),e._v(" "),n("h2",{attrs:{id:"level-compaction-merge-流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#level-compaction-merge-流程"}},[e._v("#")]),e._v(" LEVEL_COMPACTION merge 流程")]),e._v(" "),n("ul",[n("li",[e._v("外部调用 forkCurrentFileList(long timePartition) 保存当前文件的某时间分区列表\n"),n("ul",[n("li",[e._v("这里选择的文件列表 chunk 点数之和不超出 merge_chunk_point_number")])])]),e._v(" "),n("li",[e._v("外部异步创建并提交 merge 线程")]),e._v(" "),n("li",[e._v("判断是否要进行乱序合并\n"),n("ul",[n("li",[e._v("调用原乱序合并逻辑，见 MergeManager 文档")])])]),e._v(" "),n("li",[e._v("判断是否要进行全局合并\n"),n("ul",[n("li",[e._v("生成目标文件 {first_file_name}-{max_level_num - 1}.tsfile")]),e._v(" "),n("li",[e._v("生成合并日志 .compaction.log")]),e._v(" "),n("li",[e._v("记录是全局合并")]),e._v(" "),n("li",[e._v("记录目标文件")]),e._v(" "),n("li",[e._v("进行合并（记录日志 device - offset）")]),e._v(" "),n("li",[e._v("记录完成合并")])])]),e._v(" "),n("li",[e._v("循环判断每一层的文件是否要合并到下一层\n"),n("ul",[n("li",[e._v("生成目标文件 {first_file_name}-{level + 1}.tsfile")]),e._v(" "),n("li",[e._v("生成合并日志 .compaction.log")]),e._v(" "),n("li",[e._v("记录是层级合并")]),e._v(" "),n("li",[e._v("记录目标文件")]),e._v(" "),n("li",[e._v("进行合并（每写完一个 device, 记录日志 device - offset）")]),e._v(" "),n("li",[e._v("生成 .resource 文件")]),e._v(" "),n("li",[e._v("writer endFile")]),e._v(" "),n("li",[e._v("记录完成合并")])])]),e._v(" "),n("li",[e._v("加写锁")]),e._v(" "),n("li",[e._v("从磁盘删掉待合并的文件，并从正式文件列表中移除")]),e._v(" "),n("li",[e._v("删除合并日志 .compaction.log")]),e._v(" "),n("li",[e._v("释放写锁")])]),e._v(" "),n("h2",{attrs:{id:"level-compaction-recover-流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#level-compaction-recover-流程"}},[e._v("#")]),e._v(" LEVEL_COMPACTION recover 流程")]),e._v(" "),n("ul",[n("li",[e._v("如果日志文件存在\n"),n("ul",[n("li",[e._v("如果是全局合并（把所有小文件合并到最后一层）\n"),n("ul",[n("li",[e._v("如果合并没结束且目标文件还未封口\n"),n("ul",[n("li",[e._v("截断文件")]),e._v(" "),n("li",[e._v("继续全局合并")])])]),e._v(" "),n("li",[e._v("删除原文件及其对应列表")])])]),e._v(" "),n("li",[e._v("如果是层级合并\n"),n("ul",[n("li",[e._v("如果合并没结束且目标文件还未封口\n"),n("ul",[n("li",[e._v("截断文件")]),e._v(" "),n("li",[e._v("继续层级合并")])])]),e._v(" "),n("li",[e._v("删除原文件及其对应列表")])])])])]),e._v(" "),n("li",[e._v("如果日志文件不存在\n"),n("ul",[n("li",[e._v("无需恢复")])])])]),e._v(" "),n("h2",{attrs:{id:"level-compaction-例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#level-compaction-例子"}},[e._v("#")]),e._v(" LEVEL_COMPACTION 例子")]),e._v(" "),n("p",[e._v("设置 max_file_num_in_each_level = 3，tsfile_manage_strategy = LevelStrategy， max_level_num = 3，此时文件结构为，第 0 层、第 1 层、第 2 层，其中第 2 层是不再做合并的稳定的文件列表")]),e._v(" "),n("h3",{attrs:{id:"完全根据-level-合并的情况"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#完全根据-level-合并的情况"}},[e._v("#")]),e._v(" 完全根据 level 合并的情况")]),e._v(" "),n("p",[e._v("假设此时整个系统中有 5 个文件，最后一个文件没有关闭，则其结构及顺序分布如下")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t2-0 t3-0 t4-0\nlevel-1: t0-1 t1-1\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("当最后一个文件关闭，按如下方式合并（第 0 层的 t2-0、t3-0、t4-0 文件合并到了第 1 层的 t2-1 文件）")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t2-0 t3-0 t4-0\n           \\    \\    |\n             \\   \\   |\n               \\  \\  |\n                 \\ \\ |\nlevel-1: t0-1 t1-1 t2-1\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("合并后发现第 1 层合并后也满了，则继续合并到第 2 层，最后整个系统只剩下了第 2 层的 t0-2 文件")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t2-0 t3-0 t4-0\n           \\    \\    |\n             \\   \\   |\n               \\  \\  |\n                 \\ \\ |\nlevel-1: t0-1 t1-1 t2-1\n          |    /     /\n          |   /    /\n          |  /   /\n          | /  /\nlevel-2: t0-2\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("h3",{attrs:{id:"中途满足-merge-chunk-point-number-的情况"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中途满足-merge-chunk-point-number-的情况"}},[e._v("#")]),e._v(" 中途满足 merge_chunk_point_number 的情况")]),e._v(" "),n("p",[e._v("假设此时整个系统中有 4 个文件，最后一个文件没有关闭，则其结构及顺序分布如下")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t2-0 t3-0\nlevel-1: t0-1 t1-1\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("当最后一个文件关闭，但是 t0-1、t1-1、t2-0、t3-0 文件的 chunk point 数量加起来已经满足 merge_chunk_point_number，则做如下合并，即直接将所有文件合并到第 2 层（稳定层）")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t2-0 t3-0\n           |    |\nlevel-1: t0-1 t1-1\n           |    /\n           |   / \n           |  / \nlevel-2: t0-2\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("h3",{attrs:{id:"动态参数调整的例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态参数调整的例子"}},[e._v("#")]),e._v(" 动态参数调整的例子")]),e._v(" "),n("ul",[n("li",[e._v("系统会严格按照上文中提到的 merge 流程对多层文件进行选择和合并，这里只介绍到参数调整时，系统初始化过程中文件会被放在哪一层")]),e._v(" "),n("li",[e._v("假设 max_file_num_in_each_level = 3")])]),e._v(" "),n("ul",[n("li",[n("p",[e._v("从 0.10.0 升级")]),e._v(" "),n("ul",[n("li",[e._v("将所有文件的 mergeVersion 置为 {max_level_num - 1}")]),e._v(" "),n("li",[e._v("即老版本的文件不会被重复合并\n假设整个系统中有 5 个文件，此时恢复后的文件结构为：\nlevel-2: t0-2 t1-2 t2-2 t3-2 t4-2")])])]),e._v(" "),n("li",[n("p",[e._v("提高 max_level_num")]),e._v(" "),n("ul",[n("li",[e._v("此时因为不会改变任何文件的原 level，所以 recover 时文件还会被放到原来的层上，或超出 {max_level_num - 1} 的文件被放在最后一层（考虑到多次调整的情况）")]),e._v(" "),n("li",[e._v("即原文件将基于原来的 level 继续合并，超出 {max_level_num - 1} 部分也不会有乱序问题，因为在最后一层的必然是老文件\n假设整个系统中有 5 个文件，原 max_file_num_in_each_level = 2，提高后的 max_file_num_in_each_level = 3，此时恢复后的文件结构为：")])])])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t2-0 t3-0 t4-0\nlevel-1: t0-1 t1-1\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("假设 {size(t2-0)+size(t3-0)+size(t4-0)< merge_chunk_point_number}，则进行合并的过程如下")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t2-0 t3-0 t4-0\n           \\    \\    |\n             \\   \\   |\n               \\  \\  |\n                 \\ \\ |\nlevel-1: t0-1 t1-1 t2-1\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("合并后发现第 1 层合并后也满了，则继续合并到第 2 层，最后整个系统只剩下了第 2 层的 t0-2 文件")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t2-0 t3-0 t4-0\n           \\    \\    |\n             \\   \\   |\n               \\  \\  |\n                 \\ \\ |\nlevel-1: t0-1 t1-1 t2-1\n         |    /     /\n         |   /    /\n         |  /   /\n         | /  /\nlevel-2: t0-2\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("ul",[n("li",[e._v("降低 max_level_num\n"),n("ul",[n("li",[e._v("此时因为不会改变任何文件的原 level，所以 recover 时小于此时 {max_level_num - 1} 的文件还会被放到原来的层上，而超出的文件将被放在最后一层")]),e._v(" "),n("li",[e._v("即部分文件将被继续合并，而超出 {max_level_num - 2} 的文件将不会再被合并\n假设整个系统中有 7 个文件，原 max_file_num_in_each_level = 3，降低后的 max_file_num_in_each_level = 2，此时恢复后的文件结构为：")])])])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t4-0 t5-0 t6-0\nlevel-1: t0-2 t1-1 t2-1 t3-1\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("假设 {size(t2-0)+size(t3-0)+size(t4-0)< merge_chunk_point_number}，则进行合并的过程如下")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0:          t2-0 t3-0 t4-0\n                    \\    \\    |\n                      \\   \\   |\n                        \\  \\  |\n                          \\ \\ |\nlevel-1: t0-2 t1-1 t2-1 t3-1 t4-1\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("合并后发现第 1 层合并后也满了，则继续合并到第 2 层")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0:          t2-0 t3-0 t4-0\n                    \\    \\    |\n                      \\   \\   |\n                        \\  \\  |\n                          \\ \\ |\nlevel-1: t0-2 t1-1 t2-1 t3-1 t4-1\n          |    /     /\n          |   /    /\n          |  /   /\n          | /  /\nlevel-2: t0-2\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("最后剩下的文件结构为")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: \nlevel-1: t3-1 t4-1\nlevel-2: t0-2\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("ul",[n("li",[e._v("NO_COMPACTION -> LEVEL_COMPACTION\n"),n("ul",[n("li",[e._v("此时因为删去了原始合并的 {mergeVersion + 1} 策略，所以所有文件将全部被放到 0 层")]),e._v(" "),n("li",[e._v("每一次合并会最多取出满足 {merge_chunk_point_number} 的文件进行合并，直到将所有多余的文件合并完，进入正常的合并流程\n假设整个系统中有 5 个文件，此时恢复后的文件结构为：")])])])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-2: t0-0 t1-0 t2-0 t3-0 t4-0\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("假设 {size(t0-0)+size(t1-0)>=merge_chunk_point_number}，则进行第一次合并的过程如下")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t0-0 t1-0 t2-0 t3-0 t4-0 t5-0（新增了文件才会触发合并检查）\n           |   /\n           |  /\n           | /\nlevel-2: t0-2\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("假设 {size(t2-0)+size(t3-0)>=merge_chunk_point_number}，则进行第二次合并的过程如下")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t2-0 t3-0 t4-0 t5-0 t6-0（新增了文件才会触发合并检查）\n           \\    |\n            \\   |\n             \\  |\nlevel-2: t0-2 t2-2\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("假设 {size(t4-0)+size(t5-0)+size(t6-0)+size(t7-0)< merge_chunk_point_number}，则进行第三次合并的过程如下")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("level-0: t4-0 t5-0 t6-0 t7-0（新增了文件才会触发合并检查）\n           |    /   /\n           |   /  /\n           |  / /\n           | //  \nlevel-1: t4-1\n   \nlevel-2: t0-2 t2-2\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])])])}),[],!1,null,null,null);s.default=l.exports}}]);