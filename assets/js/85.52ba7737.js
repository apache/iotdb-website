(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{716:function(e,t,a){"use strict";a.r(t);var s=a(80),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"schema-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schema-template"}},[e._v("#")]),e._v(" Schema Template")]),e._v(" "),a("h2",{attrs:{id:"problem-scenario"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#problem-scenario"}},[e._v("#")]),e._v(" Problem scenario")]),e._v(" "),a("p",[e._v("When faced with a large number of entities of the same type and the measurements of these entities are the same, registering time series for each measurent will result in the following problems. On the one hand, the metadata of time series will occupy a lot of memory resources; on the other hand, the maintenance of a large number of time series will be very complex.")]),e._v(" "),a("p",[e._v("In order to enable different entities of the same type to share metadata, reduce the memory usage of metadata, and simplify the management of numerous entities and measurements, IoTDB introduces the schema template function.")]),e._v(" "),a("p",[e._v("The following picture illustrates the data model of petrol vehicle scenario. The velocity, fuel amount, acceleration, and angular velocity of each petrol vehicle spread over cities will be collected. Obviously, the measurements of single petrol vehicle are the same as those of another.")]),e._v(" "),a("img",{staticStyle:{width:"100%","max-width":"800px","max-height":"600px","margin-left":"auto","margin-right":"auto",display:"block"},attrs:{src:"https://github.com/apache/iotdb-bin-resources/blob/main/docs/UserGuide/Data%20Concept/Measurement%20Template/example_without_template.png?raw=true",alt:"example without template"}}),e._v(" "),a("h2",{attrs:{id:"concept"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concept"}},[e._v("#")]),e._v(" Concept")]),e._v(" "),a("p",[e._v("Supported from v0.13")]),e._v(" "),a("p",[e._v("In the actual scenario, many entities collect the same measurements, that is, they have the same measurements name and type. A schema template can be declared to define the collectable measurements set. Schema template is hung on any node of the tree data pattern, which means that all entities under the node have the same measurements set.")]),e._v(" "),a("p",[e._v("Currently you can only set one schema template on a specific path. If there's one schema template on one node, it will be forbidden to set any schema template on the ancestors or descendants of this node. An entity will use it's own schema template or ancestor's schema template.")]),e._v(" "),a("p",[e._v("In the following chapters of data definition language, data operation language and Java Native Interface, various operations related to schema template will be introduced one by one.")]),e._v(" "),a("p",[e._v("After applying schema template, the following picture illustrates the new data model of petrol vehicle scenario. All petrol vehicles share the schemas defined in template. There are no redundancy storage of measurement schemas.")]),e._v(" "),a("img",{staticStyle:{width:"100%","max-width":"800px","max-height":"600px","margin-left":"auto","margin-right":"auto",display:"block"},attrs:{src:"https://github.com/apache/iotdb-bin-resources/blob/main/docs/UserGuide/Data%20Concept/Measurement%20Template/example_with_template.png?raw=true",alt:"example with template"}}),e._v(" "),a("h2",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("p",[e._v("Currently, only Session API supports Schema Template usage.")]),e._v(" "),a("ul",[a("li",[e._v("Create a schema template")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n* name: template name\n* measurements: List of measurements, if it is a single measurement, just put it's name\n*     into a list and add to measurements if it is a vector measurement, put all measurements of\n*     the vector into a list and add to measurements\n* dataTypes: List of datatypes, if it is a single measurement, just put it's type into a\n*     list and add to dataTypes if it is a vector measurement, put all types of the vector\n*     into a list and add to dataTypes\n* encodings: List of encodings, if it is a single measurement, just put it's encoding into\n*     a list and add to encodings if it is a vector measurement, put all encodings of the\n*     vector into a list and add to encodings\n* compressors: List of compressors                            \nvoid createSchemaTemplate(\n      String templateName,\n      List<String> schemaName,\n      List<List<String>> measurements,\n      List<List<TSDataType>> dataTypes,\n      List<List<TSEncoding>> encodings,\n      List<CompressionType> compressors)\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br")])]),a("ul",[a("li",[e._v("Set the device template named "),a("code",[e._v("templateName")]),e._v(" at path "),a("code",[e._v("prefixPath")]),e._v(". You should firstly create the template using")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nvoid setSchemaTemplate(String templateName, String prefixPath)\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("After setting schema template，data could be inserted directly to the according timeseries. For example, suppose there's storage group root.sg and template t1(s1,s2) has been set to root.sg.car，then timeseries like root.sg.car.d1.s1 and root.sg.car.d1.s2 are available and data can be inserted。")]),e._v(" "),a("p",[e._v("For examples of schema template, you can refer to example/session/src/main/java/org/apache/iotdb/AlignedTimeseriesSessionExample.java")])])}),[],!1,null,null,null);t.default=n.exports}}]);